"use client";
import { useCallback } from "react";
import { useDispatch, useSelector } from "react-redux";
import { addProduct, resetStatus } from "../redux/features/productSlice";
import { useRouter } from "next/navigation";

const useAddProduct = () => {
  const dispatch = useDispatch();
  const router = useRouter();

  const { status, error } = useSelector((state) => state.products);

  const addProductHandler = useCallback(
    async (form, images) => {
      const token = localStorage.getItem("access_token");

      // ‚úÖ Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i k√®m ·∫£nh
      const formData = new FormData();
      Object.keys(form).forEach((key) => {
        formData.append(key, form[key]);
      });

      images.forEach((file) => {
        if (file) formData.append("images", file);
      });

      // ‚úÖ D√πng try/catch ƒë·ªÉ ki·ªÉm so√°t l·ªói
      try {
        const res = await dispatch(addProduct({ data: formData, token }));

        if (res.meta.requestStatus === "fulfilled") {
          alert("‚úÖ T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!");
          router.push("/dashboard");
        } else {
          alert("‚ùå T·∫°o s·∫£n ph·∫©m th·∫•t b·∫°i: " + (res.payload || error));
        }
      } catch (err) {
        alert("üö® ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën!");
        console.error(err);
      } finally {
        // ‚úÖ Reset tr·∫°ng th√°i v·ªÅ idle sau khi x·ª≠ l√Ω xong
        dispatch(resetStatus());
      }
    },
    [dispatch, router, error]
  );

  return {
    loading: status === "loading",
    success: status === "succeeded",
    error,
    addProduct: addProductHandler,
  };
};

export default useAddProduct;
